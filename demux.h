// Generated by the PacketGenerator compiler.  DO NOT EDIT!
#pragma once;

#include <boost/shared_ptr.hpp>
#include "Message.Base.h"
#include "Message.Pair.h"
#include "Message.Battle.ReliableOrdered.h"
#include "Message.Battle.Unreliable.h"
#include "Message.Battle.UnreliableSequenced.h"
#include "./netmessage/NetIncomingMessage.h"
#include "./netmessage/NetOutgoingMessage.h"


class demux
{
public:
	enum message_type
	{
		kBase,
		kBattle,
	};

	static message_type get_message_type(network_message::logout & msg) {return kBase;}  
	static message_type get_message_type(network_message::room_info & msg) {return kBase;}  
	static message_type get_message_type(network_message::room_in_user & msg) {return kBase;}  
	static message_type get_message_type(network_message::ping & msg) {return kBase;}  
	static message_type get_message_type(network_message::noti_leave_room & msg) {return kBase;}  
	static message_type get_message_type(network_message::change_room_info & msg) {return kBase;}  
	static message_type get_message_type(network_message::noti_intrude & msg) {return kBase;}  
	static message_type get_message_type(network_message::connect_to_server & msg) {return kBase;}  
	static message_type get_message_type(network_message::disconnect_to_server & msg) {return kBase;}  
	static message_type get_message_type(network_message::login & msg) {return kBase;}  
	static message_type get_message_type(network_message::result_login & msg) {return kBase;}  
	static message_type get_message_type(network_message::create_room & msg) {return kBase;}  
	static message_type get_message_type(network_message::result_create_room & msg) {return kBase;}  
	static message_type get_message_type(network_message::join_room & msg) {return kBase;}  
	static message_type get_message_type(network_message::result_join_room & msg) {return kBase;}  
	static message_type get_message_type(network_message::leave_room & msg) {return kBase;}  
	static message_type get_message_type(network_message::result_leave_room & msg) {return kBase;}  
	static message_type get_message_type(network_message::fire_bullet & msg) {return kBattle;}  
	static message_type get_message_type(network_message::move_object & msg) {return kBattle;}  

	static int get_message_index(network_message::logout & msg) {return 1;}  
	static int get_message_index(network_message::room_info & msg) {return 2;}  
	static int get_message_index(network_message::room_in_user & msg) {return 3;}  
	static int get_message_index(network_message::ping & msg) {return 4;}  
	static int get_message_index(network_message::noti_leave_room & msg) {return 5;}  
	static int get_message_index(network_message::change_room_info & msg) {return 6;}  
	static int get_message_index(network_message::noti_intrude & msg) {return 7;}  
	static int get_message_index(network_message::connect_to_server & msg) {return 8;}  
	static int get_message_index(network_message::disconnect_to_server & msg) {return 9;}  
	static int get_message_index(network_message::login & msg) {return 10;}  
	static int get_message_index(network_message::result_login & msg) {return 11;}  
	static int get_message_index(network_message::create_room & msg) {return 12;}  
	static int get_message_index(network_message::result_create_room & msg) {return 13;}  
	static int get_message_index(network_message::join_room & msg) {return 14;}  
	static int get_message_index(network_message::result_join_room & msg) {return 15;}  
	static int get_message_index(network_message::leave_room & msg) {return 16;}  
	static int get_message_index(network_message::result_leave_room & msg) {return 17;}  
	static int get_message_index(network_message::fire_bullet & msg) {return 18;}  
	static int get_message_index(network_message::move_object & msg) {return 19;}  


	static char * get_message_name(int msg_index)
	{
		switch(msg_index)
		{
		case 1: return "logout";
		case 2: return "room_info";
		case 3: return "room_in_user";
		case 4: return "ping";
		case 5: return "noti_leave_room";
		case 6: return "change_room_info";
		case 7: return "noti_intrude";
		case 8: return "connect_to_server";
		case 9: return "disconnect_to_server";
		case 10: return "login";
		case 11: return "result_login";
		case 12: return "create_room";
		case 13: return "result_create_room";
		case 14: return "join_room";
		case 15: return "result_join_room";
		case 16: return "leave_room";
		case 17: return "result_leave_room";
		case 18: return "fire_bullet";
		case 19: return "move_object";
		}
		return "";
	}

	static void make_message(network_message::logout & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =1;
		msg.Write((Int16)0);
		msg.Write((byte)1);
		msg.Write(data.reason_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::room_info & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =2;
		msg.Write((Int16)0);
		msg.Write((byte)2);
		msg.Write(data.room_index_);
		msg.Write(data.user_count_);
		msg.Write(data.max_user_count_);
		msg.Write((byte)data.state_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::room_in_user & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =3;
		msg.Write((Int16)0);
		msg.Write((byte)3);
		msg.Write(data.avg_rtt_);
		msg.Write(data.object_id_);
		msg.Write(data.character_level_);
		msg.Write(data.relay_object_id_);
		msg.Write((byte)data.team_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::ping & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =4;
		msg.Write((Int16)0);
		msg.Write((byte)4);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::noti_leave_room & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =5;
		msg.Write((Int16)0);
		msg.Write((byte)5);
		msg.Write(data.object_id_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::change_room_info & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =6;
		msg.Write((Int16)0);
		msg.Write((byte)6);
		msg.Write(data.room_index_);
		msg.Write(data.user_count_);
		msg.Write(data.max_user_count_);
		msg.Write((byte)data.state_);
		msg.Write(data.master_user_object_id_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::noti_intrude & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =7;
		msg.Write((Int16)0);
		msg.Write((byte)7);
		msg.Write(data.object_id_);
		msg.Write(data.enter_sequence_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::connect_to_server & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =8;
		msg.Write((Int16)0);
		msg.Write((byte)8);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::disconnect_to_server & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =9;
		msg.Write((Int16)0);
		msg.Write((byte)9);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::login & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =10;
		msg.Write((Int16)0);
		msg.Write((byte)10);
		msg.Write(data.account_);
		msg.Write(data.ssh_key_);
		msg.Write(data.session_key_);
		msg.Write(data.member_no_);
		msg.Write(data.member_id_);
		msg.Write(data.profile_img_url_);
		msg.Write(data.nickname_);
		msg.Write(data.account_type_);
		msg.Write(data.game_access_token_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::result_login & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =11;
		msg.Write((Int16)0);
		msg.Write((byte)11);
		msg.Write(data.object_id_);
		msg.Write((byte)data.error_code_);
		msg.Write(data.need_representative_name_);
		msg.Write(data.is_gm_);
		msg.Write(data.gold_);
		msg.Write(data.ruby_);
		msg.Write(data.selected_character_slot_no_);
		msg.Write(data.representative_name_);
		msg.Write(data.klein_);
		msg.Write(data.skill_point_);
		msg.Write(data.next_reset_daily_time_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::create_room & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =12;
		msg.Write((Int16)0);
		msg.Write((byte)12);
		msg.Write(data.session_key_);
		msg.Write(data.room_name_);
		msg.Write(data.player_count_);
		msg.Write(data.infinite_);
		msg.Write(data.dungeon_index_);
		msg.Write(data.fighting_power_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::result_create_room & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =13;
		msg.Write((Int16)0);
		msg.Write((byte)13);
		msg.Write(data.room_id_);
		msg.Write(data.master_user_object_id_);
		msg.Write(data.enter_sequence_);
		msg.Write(data.room_in_user_.avg_rtt_);
		msg.Write(data.room_in_user_.object_id_);
		msg.Write(data.room_in_user_.character_level_);
		msg.Write(data.room_in_user_.relay_object_id_);
		msg.Write((byte)data.room_in_user_.team_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::join_room & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =14;
		msg.Write((Int16)0);
		msg.Write((byte)14);
		msg.Write(data.session_key_);
		msg.Write(data.room_id_);
		msg.Write(data.fighting_power_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::result_join_room & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =15;
		msg.Write((Int16)0);
		msg.Write((byte)15);
		msg.Write(data.master_user_object_id_);
		msg.Write((byte)data.state_);
		msg.Write(data.enter_sequence_);
		msg.Write(data.room_in_user_.avg_rtt_);
		msg.Write(data.room_in_user_.object_id_);
		msg.Write(data.room_in_user_.character_level_);
		msg.Write(data.room_in_user_.relay_object_id_);
		msg.Write((byte)data.room_in_user_.team_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::leave_room & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =16;
		msg.Write((Int16)0);
		msg.Write((byte)16);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::result_leave_room & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =17;
		msg.Write((Int16)0);
		msg.Write((byte)17);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::fire_bullet & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =18;
		msg.Write((Int16)0);
		msg.Write((byte)18);
		msg.Write(data.position_.x_);
		msg.Write(data.position_.y_);
		msg.Write(data.position_.z_);
		msg.Write(data.rotation_.x_);
		msg.Write(data.rotation_.y_);
		msg.Write(data.rotation_.z_);
		msg.Write(data.rotation_.w_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_message(network_message::move_object & data, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =19;
		msg.Write((Int16)0);
		msg.Write((byte)19);
		msg.Write(data.position_.x_);
		msg.Write(data.position_.y_);
		msg.Write(data.position_.z_);
		msg.Write(data.rotation_.x_);
		msg.Write(data.rotation_.y_);
		msg.Write(data.rotation_.z_);
		msg.Write(data.rotation_.w_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}

	static void make_relay_message(network_message::fire_bullet & data, int from_object_id, int to_object_id, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =18;
		msg.Write((Int16)0);
		msg.Write((byte)18);
		msg.Write((Int32)from_object_id);
		msg.Write((Int32)to_object_id);
		msg.Write(data.position_.x_);
		msg.Write(data.position_.y_);
		msg.Write(data.position_.z_);
		msg.Write(data.rotation_.x_);
		msg.Write(data.rotation_.y_);
		msg.Write(data.rotation_.z_);
		msg.Write(data.rotation_.w_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}
	static void make_relay_message(network_message::move_object & data, int from_object_id, int to_object_id, NetOutgoingMessage & msg)
	{
		msg.m_msgIndex =19;
		msg.Write((Int16)0);
		msg.Write((byte)19);
		msg.Write((Int32)from_object_id);
		msg.Write((Int32)to_object_id);
		msg.Write(data.position_.x_);
		msg.Write(data.position_.y_);
		msg.Write(data.position_.z_);
		msg.Write(data.rotation_.x_);
		msg.Write(data.rotation_.y_);
		msg.Write(data.rotation_.z_);
		msg.Write(data.rotation_.w_);
		msg.WriteAt (0, (Int16)(msg.LengthBytes()-NetBuffer::header_length));
	}

	template<class DISPATCHER_TYPE>
	static void demultiplexer(NetIncomingMessage & msg, DISPATCHER_TYPE & dispatcher)
	{
		switch(msg.ReadByte())
		{
		case 1:
			{
				boost::shared_ptr<network_message::logout> data( new network_message::logout());
				msg.ReadInt32(data->reason_);
				dispatcher.dispatch(data);
			}
			break;
		case 2:
			{
				boost::shared_ptr<network_message::room_info> data( new network_message::room_info());
				msg.ReadInt32(data->room_index_);
				msg.ReadInt32(data->user_count_);
				msg.ReadInt32(data->max_user_count_);
				data->state_ = (network_message::enum_room_state)msg.ReadByte();
				dispatcher.dispatch(data);
			}
			break;
		case 3:
			{
				boost::shared_ptr<network_message::room_in_user> data( new network_message::room_in_user());
				msg.ReadInt64(data->avg_rtt_);
				msg.ReadInt32(data->object_id_);
				msg.ReadInt32(data->character_level_);
				msg.ReadInt32(data->relay_object_id_);
				data->team_ = (network_message::enum_player_team)msg.ReadByte();
				dispatcher.dispatch(data);
			}
			break;
		case 4:
			{
				boost::shared_ptr<network_message::ping> data( new network_message::ping());
				dispatcher.dispatch(data);
			}
			break;
		case 5:
			{
				boost::shared_ptr<network_message::noti_leave_room> data( new network_message::noti_leave_room());
				msg.ReadInt32(data->object_id_);
				dispatcher.dispatch(data);
			}
			break;
		case 6:
			{
				boost::shared_ptr<network_message::change_room_info> data( new network_message::change_room_info());
				msg.ReadInt32(data->room_index_);
				msg.ReadInt32(data->user_count_);
				msg.ReadInt32(data->max_user_count_);
				data->state_ = (network_message::enum_room_state)msg.ReadByte();
				msg.ReadInt32(data->master_user_object_id_);
				dispatcher.dispatch(data);
			}
			break;
		case 7:
			{
				boost::shared_ptr<network_message::noti_intrude> data( new network_message::noti_intrude());
				msg.ReadInt32(data->object_id_);
				msg.ReadInt32(data->enter_sequence_);
				dispatcher.dispatch(data);
			}
			break;
		case 8:
			{
				boost::shared_ptr<network_message::connect_to_server> data( new network_message::connect_to_server());
				dispatcher.dispatch(data);
			}
			break;
		case 9:
			{
				boost::shared_ptr<network_message::disconnect_to_server> data( new network_message::disconnect_to_server());
				dispatcher.dispatch(data);
			}
			break;
		case 10:
			{
				boost::shared_ptr<network_message::login> data( new network_message::login());
				msg.ReadString(data->account_);
				msg.ReadString(data->ssh_key_);
				msg.ReadInt64(data->session_key_);
				msg.ReadInt64(data->member_no_);
				msg.ReadString(data->member_id_);
				msg.ReadString(data->profile_img_url_);
				msg.ReadString(data->nickname_);
				msg.ReadInt32(data->account_type_);
				msg.ReadString(data->game_access_token_);
				dispatcher.dispatch(data);
			}
			break;
		case 11:
			{
				boost::shared_ptr<network_message::result_login> data( new network_message::result_login());
				msg.ReadInt32(data->object_id_);
				data->error_code_ = (network_message::enum_error_code)msg.ReadByte();
				msg.ReadBoolean(data->need_representative_name_);
				msg.ReadBoolean(data->is_gm_);
				msg.ReadInt32(data->gold_);
				msg.ReadInt32(data->ruby_);
				msg.ReadInt32(data->selected_character_slot_no_);
				msg.ReadString(data->representative_name_);
				msg.ReadInt32(data->klein_);
				msg.ReadInt32(data->skill_point_);
				msg.ReadInt64(data->next_reset_daily_time_);
				dispatcher.dispatch(data);
			}
			break;
		case 12:
			{
				boost::shared_ptr<network_message::create_room> data( new network_message::create_room());
				msg.ReadInt64(data->session_key_);
				msg.ReadString(data->room_name_);
				msg.ReadInt32(data->player_count_);
				msg.ReadBoolean(data->infinite_);
				msg.ReadInt32(data->dungeon_index_);
				msg.ReadInt32(data->fighting_power_);
				dispatcher.dispatch(data);
			}
			break;
		case 13:
			{
				boost::shared_ptr<network_message::result_create_room> data( new network_message::result_create_room());
				msg.ReadInt32(data->room_id_);
				msg.ReadInt32(data->master_user_object_id_);
				msg.ReadInt32(data->enter_sequence_);
				msg.ReadInt64(data->room_in_user_.avg_rtt_);
				msg.ReadInt32(data->room_in_user_.object_id_);
				msg.ReadInt32(data->room_in_user_.character_level_);
				msg.ReadInt32(data->room_in_user_.relay_object_id_);
				data->room_in_user_.team_ = (network_message::enum_player_team)msg.ReadByte();
				dispatcher.dispatch(data);
			}
			break;
		case 14:
			{
				boost::shared_ptr<network_message::join_room> data( new network_message::join_room());
				msg.ReadInt64(data->session_key_);
				msg.ReadInt32(data->room_id_);
				msg.ReadInt32(data->fighting_power_);
				dispatcher.dispatch(data);
			}
			break;
		case 15:
			{
				boost::shared_ptr<network_message::result_join_room> data( new network_message::result_join_room());
				msg.ReadInt32(data->master_user_object_id_);
				data->state_ = (network_message::enum_room_state)msg.ReadByte();
				msg.ReadInt32(data->enter_sequence_);
				msg.ReadInt64(data->room_in_user_.avg_rtt_);
				msg.ReadInt32(data->room_in_user_.object_id_);
				msg.ReadInt32(data->room_in_user_.character_level_);
				msg.ReadInt32(data->room_in_user_.relay_object_id_);
				data->room_in_user_.team_ = (network_message::enum_player_team)msg.ReadByte();
				dispatcher.dispatch(data);
			}
			break;
		case 16:
			{
				boost::shared_ptr<network_message::leave_room> data( new network_message::leave_room());
				dispatcher.dispatch(data);
			}
			break;
		case 17:
			{
				boost::shared_ptr<network_message::result_leave_room> data( new network_message::result_leave_room());
				dispatcher.dispatch(data);
			}
			break;
		case 18:
			{
				dispatcher.relay(18, msg);
			}
			break;
		case 19:
			{
				dispatcher.relay(19, msg);
			}
			break;
		default:
			{
			}
			break;
		}
	}
};
